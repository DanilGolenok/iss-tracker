{"version":3,"sources":["business/api/ISSLocationService.ts","business/models/Interval.ts","components/Location.tsx","components/CosmonautElement.tsx","business/models/Cosmonaut.ts","business/api/ISSPeopleService.ts","components/CosmonautList.tsx","components/RealTimeMap.tsx","components/Time.tsx","App.tsx","index.tsx"],"names":["ISSLocationService","fetch","data","json","location","latitude","longitude","google","maps","LatLng","toFixed","Interval","ticker","this","subscribers","push","setInterval","forEach","DELAY","tick","Location","props","issLocationService","state","issLocation","updateISSLocation","subscribe","getISSLocation","setState","className","lng","lat","Component","CosmonautElement","cosmonaut","name","title","photo","flag","daysInSpace","wikiPage","onClick","url","window","open","src","alt","Cosmonaut","ISSPeopleService","apiPeopleInSpace","people","filter","map","biophoto","countryflag","launchdate","biolink","start","moment","now","duration","diff","Math","trunc","asDays","CosmonautList","issPeopleService","useState","cosmonautList","setCosmonautList","useEffect","updatePeopleOnISS","peopleOnIss","getPeopleOnISS","key","uuid","v4","length","RealTimeMap","marker","initMap","setUpMarker","updateMarker","mapElement","document","getElementById","options","setUpMapOptions","Map","zoom","center","styles","stylers","hue","invert_lightness","saturation","lightness","gamma","featureType","elementType","color","disableDefaultUI","position","Marker","setPosition","id","Time","timeFormat","dateFormat","updateDate","date","utc","format","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.de4888fd.chunk.js","sourcesContent":["interface ISSPosition {\r\n  latitude: number\r\n  longitude: number\r\n}\r\n\r\nexport default class ISSLocationService {\r\n  async getISSLocation(): Promise<google.maps.LatLng> {\r\n    const URL = 'https://api.wheretheiss.at/v1/satellites/25544'\r\n\r\n    const data = await fetch(URL)\r\n    const location: ISSPosition = await data.json()\r\n\r\n    const { latitude, longitude } = location\r\n\r\n    return new google.maps.LatLng(+latitude.toFixed(5), +longitude.toFixed(5))\r\n  }\r\n}\r\n","export default class Interval {\r\n  static readonly DELAY: number = 5000\r\n  static subscribers: (() => void)[] = []\r\n\r\n  static subscribe(ticker: () => void) {\r\n    this.subscribers.push(ticker)\r\n  }\r\n\r\n  static tick() {\r\n    setInterval(() => this.subscribers.forEach(ticker => ticker()), this.DELAY)\r\n  }\r\n}\r\n\r\nInterval.tick()\r\n","import React, { Component } from 'react'\r\nimport ISSLocationService from '../business/api/ISSLocationService'\r\nimport Interval from '../business/models/Interval'\r\n\r\ntype State = {\r\n  issLocation: google.maps.LatLng | null\r\n}\r\n\r\nclass Location extends Component {\r\n  private issLocationService: ISSLocationService\r\n  readonly state: State\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n\r\n    this.issLocationService = new ISSLocationService()\r\n    this.state = { issLocation: null }\r\n    this.updateISSLocation()\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateISSLocation()\r\n    Interval.subscribe(() => this.updateISSLocation())\r\n  }\r\n\r\n  async updateISSLocation() {\r\n    const issLocation = await this.issLocationService.getISSLocation()\r\n    this.setState({ issLocation })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"location\">\r\n        <h3 className=\"label\">ISS is now located at:</h3>\r\n        <div className=\"location-info\">\r\n          <div className=\"long\">\r\n            <span>longitude:</span>\r\n            <span>{this.state.issLocation?.lng()}</span>\r\n          </div>\r\n          <div className=\"lat\">\r\n            <span>latitude:</span>\r\n            <span>{this.state.issLocation?.lat()}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Location\r\n","import React from 'react'\r\nimport Cosmonaut from '../business/models/Cosmonaut'\r\n\r\ntype Props = {\r\n  cosmonaut: Cosmonaut\r\n}\r\n\r\nconst CosmonautElement: React.FC<Props> = ({ cosmonaut }) => {\r\n  const { name, title, photo, flag, daysInSpace, wikiPage } = cosmonaut\r\n\r\n  const goToWikiPage = (url: string) => {\r\n    window.open(url, '_blank')\r\n  }\r\n\r\n  return (\r\n    <div onClick={() => goToWikiPage(wikiPage)} className=\"cosmonaut\">\r\n      <div className=\"bio\">\r\n        <div className=\"photo\">\r\n          <img src={photo} alt=\"cosmonaut photo\" />\r\n        </div>\r\n        <div className=\"person-info\">\r\n          <span className=\"name\">{name}</span>\r\n          <img src={flag} alt=\"country flag\" className=\"flag\" />\r\n          <span className=\"title\">{title}</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"launch-info\">\r\n        <div className=\"duration\">{daysInSpace}</div>\r\n        <span className=\"label\">Days in space</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CosmonautElement\r\n","export default class Cosmonaut {\r\n  name: string\r\n  photo: string\r\n  title: string\r\n  flag: string\r\n  daysInSpace: number\r\n  wikiPage: string\r\n\r\n  constructor(\r\n    name: string,\r\n    photo: string,\r\n    title: string,\r\n    flag: string,\r\n    daysInSpace: number,\r\n    wikiPage: string\r\n  ) {\r\n    this.name = name\r\n    this.photo = photo\r\n    this.title = title\r\n    this.flag = flag\r\n    this.daysInSpace = daysInSpace\r\n    this.wikiPage = wikiPage\r\n  }\r\n}\r\n","import Cosmonaut from '../models/Cosmonaut'\r\nimport moment from 'moment'\r\nimport apiPeopleInSpace from './peopleinspace.json'\r\n\r\ninterface PersonInSpace {\r\n  name: string\r\n  biophoto: string\r\n  countryflag: string\r\n  launchdate: string\r\n  title: string\r\n  location: string\r\n  biolink: string\r\n}\r\n\r\n/**\r\n * Я пытался получить данные о текущем составе МКС по этому URL:\r\n * http://www.howmanypeopleareinspacerightnow.com/peopleinspace.json\r\n *\r\n * Но получил такую ошибку:\r\n * Access to fetch at 'https://www.howmanypeopleareinspacerightnow.com/space.json'\r\n * from origin 'http://localhost:3000' has been blocked by CORS policy:\r\n * No 'Access-Control-Allow-Origin' header is present on the requested resource.\r\n *\r\n * После нескольких часов гуглежа, я понял, что моему домену запрещено посылать\r\n * запросы по этому URL, а других способов получить полные данные о составе МКС я не нашёл\r\n * (я не использовал API, что мне дали в ТЗ потому что там слишком мало данных, только имя)\r\n *\r\n * Я решил воспользоваться Postman чтобы сделать запрос и скопировал полученные данные,\r\n * которые вставил в файл peopleinspace.json\r\n */\r\nexport default class ISSPeopleService {\r\n  getPeopleOnISS(): Cosmonaut[] {\r\n    // const URL = 'http://www.howmanypeopleareinspacerightnow.com/peopleinspace.json'\r\n    const ISS_LOCATION = 'International Space Station'\r\n\r\n    const peopleInSpace: PersonInSpace[] = apiPeopleInSpace.people\r\n    const peopleOnISS = peopleInSpace.filter(\r\n      cosmonaut => cosmonaut.location === ISS_LOCATION\r\n    )\r\n\r\n    return peopleOnISS.map(cosmonaut => {\r\n      const {\r\n        name,\r\n        biophoto,\r\n        countryflag,\r\n        launchdate,\r\n        title,\r\n        biolink\r\n      } = cosmonaut\r\n\r\n      const start = moment(launchdate)\r\n      const now = moment()\r\n      const duration = moment.duration(now.diff(start))\r\n      const daysInSpace = Math.trunc(duration.asDays())\r\n\r\n      return new Cosmonaut(\r\n        name,\r\n        biophoto,\r\n        title,\r\n        countryflag,\r\n        daysInSpace,\r\n        biolink\r\n      )\r\n    })\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport CosmonautElement from './CosmonautElement'\r\nimport ISSPeopleService from '../business/api/ISSPeopleService'\r\nimport Cosmonaut from '../business/models/Cosmonaut'\r\nimport uuid from 'uuid'\r\n\r\nconst CosmonautList: React.FC = () => {\r\n  const issPeopleService = new ISSPeopleService()\r\n  const [cosmonautList, setCosmonautList] = useState<Cosmonaut[]>([])\r\n\r\n  useEffect(() => updatePeopleOnISS(), [])\r\n\r\n  const updatePeopleOnISS = () => {\r\n    const peopleOnIss = issPeopleService.getPeopleOnISS()\r\n    setCosmonautList(peopleOnIss)\r\n  }\r\n\r\n  return (\r\n    <div className=\"cosmonaut-list\">\r\n      <div className=\"list scrollbar\">\r\n        {cosmonautList.map(cosmonaut => (\r\n          <CosmonautElement key={uuid.v4()} cosmonaut={cosmonaut} />\r\n        ))}\r\n      </div>\r\n      <span className=\"total\">\r\n        Total amount: {cosmonautList.length} people on ISS\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CosmonautList\r\n","import React, { Component } from 'react'\r\nimport ISSLocationService from '../business/api/ISSLocationService'\r\nimport Interval from '../business/models/Interval'\r\n\r\nclass RealTimeMap extends Component {\r\n  private map!: google.maps.Map\r\n  private marker!: google.maps.Marker\r\n  private issLocationService: ISSLocationService\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n    this.issLocationService = new ISSLocationService()\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const location = await this.issLocationService.getISSLocation()\r\n\r\n    this.initMap(location)\r\n    this.setUpMarker(location)\r\n    Interval.subscribe(() => this.updateMarker())\r\n  }\r\n\r\n  initMap(location: google.maps.LatLng) {\r\n    const mapElement: Element = document.getElementById('map') as Element\r\n    const options: google.maps.MapOptions = this.setUpMapOptions(location)\r\n\r\n    this.map = new google.maps.Map(mapElement, options)\r\n  }\r\n\r\n  setUpMapOptions(location: google.maps.LatLng): google.maps.MapOptions {\r\n    return {\r\n      zoom: 3,\r\n      center: location || new google.maps.LatLng(40.67, -73.94),\r\n      styles: [\r\n        {\r\n          stylers: [\r\n            { hue: '#ff1a00' },\r\n            { invert_lightness: true },\r\n            { saturation: -100 },\r\n            { lightness: 33 },\r\n            { gamma: 0.5 }\r\n          ]\r\n        },\r\n        {\r\n          featureType: 'water',\r\n          elementType: 'geometry',\r\n          stylers: [{ color: '#2D333C' }]\r\n        }\r\n      ],\r\n      disableDefaultUI: true\r\n    }\r\n  }\r\n\r\n  setUpMarker(location: google.maps.LatLng) {\r\n    const options: google.maps.ReadonlyMarkerOptions = {\r\n      position: location,\r\n      map: this.map,\r\n      title: 'Current ISS Position'\r\n    }\r\n\r\n    this.marker = new google.maps.Marker(options)\r\n  }\r\n\r\n  async updateMarker() {\r\n    const location = await this.issLocationService.getISSLocation()\r\n    this.marker?.setPosition(location)\r\n  }\r\n\r\n  render() {\r\n    return <div id=\"map\"></div>\r\n  }\r\n}\r\n\r\nexport default RealTimeMap\r\n","import React, { Component } from 'react'\r\nimport moment from 'moment'\r\n\r\ntype State = {\r\n  timeFormat: string\r\n  dateFormat: string\r\n}\r\n\r\nclass Time extends Component {\r\n  readonly state!: State\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      timeFormat: '',\r\n      dateFormat: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateDate()\r\n    setInterval(() => this.updateDate(), 1000)\r\n  }\r\n\r\n  updateDate() {\r\n    const date = moment().utc()\r\n    this.setState({\r\n      timeFormat: date.format('h:mm:ss A'),\r\n      dateFormat: date.format('dddd, D MMM YYYY')\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"time\">\r\n        <h3 className=\"utc-time\">Current UTC time: {this.state.timeFormat}</h3>\r\n        <span className=\"date\">{this.state.dateFormat}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Time\r\n","import React from 'react'\nimport Location from './components/Location'\nimport CosmonautList from './components/CosmonautList'\nimport RealTimeMap from './components/RealTimeMap'\nimport Time from './components/Time'\n\nimport './sass/site.scss'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <Location />\n      <Time />\n      <RealTimeMap />\n      <CosmonautList />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}